#!/bin/bash
#
# Copyright (C) 2023 Forschungszentrum JÃ¼lich GmbH, INM-6
#
# Builder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Builder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Builder.  If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
CMAKEFLAGS="-Dwith-mpi=ON -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_C_COMPILER=mpicc -Dwith-python=ON"
CONFIGURE_OPTIONS="$CMAKEFLAGS $EXTRA_CMAKE_FLAGS"

# Override functions which are not required here
check_package_file () { :; }
source_prepare () { :; }
build_install_test () { :; }

source_get () {
    # Only clone if target directory is empty
    if [ -z "$(ls -A $SIMULATOR_REPO_DIR)" ]; then
        git clone --single-branch --branch="$CB_SIMULATOR_BRANCH" --depth=1 "$CB_SIMULATOR_REPO" "$SIMULATOR_REPO_DIR"
    fi
}

build_package () {
	log_status ">>> build"
	cd "${BUILD}"
	set -x
	# CONFIGURE_OPTIONS variable needs to be split, so no quotes
	# shellcheck disable=SC2086
	cmake ${CONFIGURE_OPTIONS} -DCMAKE_INSTALL_PREFIX:PATH="$TARGET" "$SIMULATOR_REPO_DIR" 2>&1 | tee "${LOG}/cmake.log"
	make -j "${MAKE_THREADS:-$(nproc)}" 2>&1 | tee "${LOG}/make.log"
	set +x
}

build_install () {
	log_status ">>> install"
	make install 2>&1 | tee "${LOG}/make-install.log"
	awk 'BEGIN {f=3;x=0}; /^-------/{x=1;if (f>0) f--} f*x' "${LOG}/cmake.log" >"${TARGET}/ConfigurationSummary.txt"
}

module_install () {
    AUTOMATIC_BUILD_WARNING=" This file was automatically produced by Builder.\n# Any changes may be overwritten without notice.\n#\n# Please see ${BUILDER_PATH} for details."

	PREREQ_DEPENDS="$(module_capture_prereq)"
    module_path="${MODULE_INSTALL_PATH}/${PACKAGE}/${VERSION}/${VARIANT}"
    log_status ">>> installing module file to ${module_path}"
    mkdir -pv "$(dirname "${module_path}")"
    module="$(cat "${PLAN}.module")"
    if version_gt $BASH_VERSION 4.4; then
        echo -e "${module@P}" >"${module_path}"
    else
        # this is a bad substitute for the power of the bash>4.4 notation.
        echo "${module}" | sed \
            -e 's%\\\$%__NOT_BUILDER_DOLLAR__%g' \
            -e "s%\${\?AUTOMATIC_BUILD_WARNING}\?%$AUTOMATIC_BUILD_WARNING%g" \
            -e "s%\${\?BUILDER_PATH}\?%$BUILDER_PATH%g" \
            -e "s%\${\?PLANFILE_PATH}\?%$PLANFILE_PATH%g" \
            -e "s%\${\?PACKAGE_CACHE}\?%$PACKAGE_CACHE%g" \
            -e "s%\${\?SOURCE_PATH}\?%$SOURCE_PATH%g" \
            -e "s%\${\?BUILD_PATH}\?%$BUILD_PATH%g" \
            -e "s%\${\?TARGET_PATH}\?%$TARGET_PATH%g" \
            -e "s%\${\?MODULE_INSTALL_PATH}\?%$MODULE_INSTALL_PATH%g" \
            -e "s%\${\?LOG_PATH}\?%$LOG_PATH%g" \
            -e "s%\${\?PACKAGE}\?%$PACKAGE%g" \
            -e "s%\${\?VERSION}\?%$VERSION%g" \
            -e "s%\${\?VARIANT}\?%$VARIANT%g" \
            -e "s%\${\?PLAN}\?%$PLAN%g" \
            -e "s%\${\?SIMULATOR_REPO_DIR}\?%$SIMULATOR_REPO_DIR%g" \
            -e "s%\${\?TARGET}\?%$TARGET%g" \
            -e "s%\${\?BUILD}\?%$BUILD%g" \
            -e "s%\${\?LOG}\?%$LOG%g" \
            -e "s%\${\?PREREQ_DEPENDS}\?%$PREREQ_DEPENDS%g" \
            -e "s%\${\?VIRTUAL_ENV}\?%${VIRTUAL_ENV:-/}%g" \
            -e 's%__NOT_BUILDER_DOLLAR__%$%g' \
                > "${module_path}"
    fi
}
